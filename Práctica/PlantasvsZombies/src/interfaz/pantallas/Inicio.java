package interfaz.pantallas;

import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import juego.Juego;
import juego.Jugador;
import juego.UtilJugador;
import objetos.Tablero;
import objetos.Tablero.Dificultad;

/**
 * Clase que recoge los elementos de la pantalla de inicio.
 */
public class Inicio extends javax.swing.JPanel {
    /** Atributo que recibe la imagen de fondo */
    private Image fondo;
    /** Atributo que recoge la anchura */
    private int ancho;
    /** Atributo que recoge la altura */
    private int alto;
    /** Atributo que referencia el juego */
    private Juego juego;
    /** Atributo que referencia el ranking */
    private Ranking ranking;

    /**
     * Metodo que crea la pantalla de inicio.
     * 
     * @param juego juego
     */
    public Inicio(Juego juego) {
        this.juego = juego;
        this.ancho = juego.getVentana().getAncho();
        this.alto = juego.getVentana().getAlto();
        this.ranking = new Ranking();
        this.ranking.setVisible(false);
        
        initComponents();
        fondo = new ImageIcon("recursos/intro.png").getImage();
        
        jLabelDificultad.setVisible(false);
        jComboBoxDificultad.setVisible(false);
        activarRegistro(false);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                juego.getVentana().setVisible(true);     
            }
        });
    }
    
    /**
     * Dibuja la pantalla de registro.
     * 
     * @param visible define si se visualiza o no
     */
    private void activarRegistro(boolean visible) {
        jLabelDNI.setVisible(visible);
        jLabelNombre.setVisible(visible);
        jFormattedTextFieldDNI.setVisible(visible);
        jTextFieldNombre.setVisible(visible);
        jButtonAceptar.setVisible(visible);
        jButtonCancelar.setVisible(visible);
        
        jButtonJugar.setVisible(!visible);
        jButtonRegistrarse.setVisible(!visible);
        jButtonCrearFicha.setVisible(!visible);
        jButtonRanking.setVisible(!visible);
    }
    
    /**
     * Dibuja la pantalla para crear una ficha.
     * 
     * @param visible define si se visualiza o no
     */
    private void activarCrearFicha(boolean visible) {
        jLabelDNI.setVisible(visible);
        jFormattedTextFieldDNI.setVisible(visible);
        jButtonAceptar.setVisible(visible);
        jButtonCancelar.setVisible(visible);
        
        jButtonJugar.setVisible(!visible);
        jButtonRegistrarse.setVisible(!visible);
        jButtonCrearFicha.setVisible(!visible);
        jButtonRanking.setVisible(!visible);
    }
    
    /**
     * Dibuja la pantalla de juego.
     * 
     * @param visible define si se visualiza o no
     */
    private void activarJugar(boolean visible) {
        jLabelDificultad.setVisible(visible);
        jComboBoxDificultad.setVisible(visible);
        jLabelDNI.setVisible(visible);
        jFormattedTextFieldDNI.setVisible(visible);
        jButtonAceptar.setVisible(visible);
        jButtonCancelar.setVisible(visible);
        
        jButtonJugar.setVisible(!visible);
        jButtonRegistrarse.setVisible(!visible);
        jButtonCrearFicha.setVisible(!visible);
        jButtonRanking.setVisible(!visible);
    }


    /**
     * Dibuja los componentes y el fondo.
     * 
     * @param g graficos
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        g.drawImage(fondo, 0, 0, ancho, alto, null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonJugar = new javax.swing.JButton();
        jButtonRegistrarse = new javax.swing.JButton();
        jLabelDNI = new javax.swing.JLabel();
        jFormattedTextFieldDNI = new javax.swing.JFormattedTextField();
        jLabelNombre = new javax.swing.JLabel();
        jTextFieldNombre = new javax.swing.JTextField();
        jButtonAceptar = new javax.swing.JButton();
        jButtonCancelar = new javax.swing.JButton();
        jButtonCrearFicha = new javax.swing.JButton();
        jComboBoxDificultad = new javax.swing.JComboBox<>();
        jLabelDificultad = new javax.swing.JLabel();
        jButtonRanking = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(986, 754));

        jButtonJugar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonJugar.setText("Jugar");
        jButtonJugar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonJugarActionPerformed(evt);
            }
        });

        jButtonRegistrarse.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonRegistrarse.setText("Registrarse");
        jButtonRegistrarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRegistrarseActionPerformed(evt);
            }
        });

        jLabelDNI.setBackground(new java.awt.Color(255, 255, 255));
        jLabelDNI.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelDNI.setText("DNI");
        jLabelDNI.setOpaque(true);

        try {
            jFormattedTextFieldDNI.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("########-?")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabelNombre.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelNombre.setText("Nombre");
        jLabelNombre.setOpaque(true);

        jButtonAceptar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonAceptar.setText("Aceptar");
        jButtonAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptarActionPerformed(evt);
            }
        });

        jButtonCancelar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonCrearFicha.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonCrearFicha.setText("Crear ficha");
        jButtonCrearFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearFichaActionPerformed(evt);
            }
        });

        jComboBoxDificultad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BAJA", "MEDIA", "ALTA", "IMPOSIBLE" }));

        jLabelDificultad.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelDificultad.setText("Dificultad");
        jLabelDificultad.setOpaque(true);

        jButtonRanking.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButtonRanking.setText("Ver ranking");
        jButtonRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRankingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(399, 399, 399)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNombre)
                            .addComponent(jLabelDNI))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jButtonAceptar)
                        .addGap(47, 47, 47)
                        .addComponent(jButtonCancelar)))
                .addContainerGap(289, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonRegistrarse)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonRanking)
                                .addComponent(jButtonCrearFicha)))
                        .addGap(439, 439, 439))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelDificultad)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxDificultad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(411, 411, 411))))
            .addGroup(layout.createSequentialGroup()
                .addGap(425, 425, 425)
                .addComponent(jButtonJugar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jButtonJugar)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDificultad)
                    .addComponent(jComboBoxDificultad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextFieldDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombre)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRegistrarse)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAceptar)
                    .addComponent(jButtonCancelar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCrearFicha)
                .addGap(29, 29, 29)
                .addComponent(jButtonRanking)
                .addContainerGap(163, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo para el boton de registro.
     * 
     * @param evt evento en el boton
     */
    private void jButtonRegistrarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRegistrarseActionPerformed
        activarRegistro(true);
        jFormattedTextFieldDNI.setText("");
        jTextFieldNombre.setText("");
    }//GEN-LAST:event_jButtonRegistrarseActionPerformed

    /**
     * Método para el botón de cancelar.
     * 
     * @param evt evento en el boton
     */
    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        if (jTextFieldNombre.isVisible()) {
            activarRegistro(false);    
        } else if (jLabelDificultad.isVisible()) {
            activarJugar(false);
        } else {
            activarCrearFicha(false);
        }
        
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    /**
     * Método para el boton de aceptar.
     * 
     * @param evt evento en el botón
     */
    private void jButtonAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptarActionPerformed
        if (jTextFieldNombre.isVisible()) {
            try {
                String dni = jFormattedTextFieldDNI.getText().toUpperCase();
                String nombre = jTextFieldNombre.getText();
                
                if (dni.equals("        - ")) {
                    JOptionPane.showMessageDialog(this, "Error: DNI es un campo obligatorio.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                if (nombre.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Error: Nombre es un campo obligatorio.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Jugador jugador = new Jugador(dni, nombre);
                // Se inserta en el HashMap
                if (UtilJugador.altaJugador(jugador)) {
                    JOptionPane.showMessageDialog(this, "Jugador registrado.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Error: Ya existe el jugador.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (HeadlessException e) {
                JOptionPane.showMessageDialog(this, "Excepción al dar de alta.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        } else if (jComboBoxDificultad.isVisible()) {
            try {
                String dni = jFormattedTextFieldDNI.getText().toUpperCase();
                Dificultad dificultad = Dificultad.values()[jComboBoxDificultad.getSelectedIndex()];
                
                if (dni.equals("        - ")) {
                    JOptionPane.showMessageDialog(this, "Error: DNI es un campo obligatorio.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                Jugador jugador = UtilJugador.getJugadores().get(dni);    
                if (jugador != null) {
                    int resultado = 1;
                    Tablero tablero = UtilJugador.cargarPartida(jugador);
                    if (tablero != null) {
                        resultado = JOptionPane.showConfirmDialog(this, "Se ha encontrado una partida guardada, ¿cargar esta partida?", "Mensaje", JOptionPane.YES_NO_OPTION);
                    }
                    
                    if (resultado == 0) {
                        juego.iniciar(tablero, jugador, dificultad);    
                    } else {
                        juego.iniciar(null, jugador, dificultad);
                    }
                    
                } else {
                    JOptionPane.showMessageDialog(this, "Error: No existe el jugador.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (HeadlessException e) {
                JOptionPane.showMessageDialog(this, "Excepción al crear la partida.", "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            try {
                String dni = jFormattedTextFieldDNI.getText().toUpperCase();
                
                if (dni.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Error: DNI es un campo obligatorio.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                if (!UtilJugador.getJugadores().isEmpty()) {
                    Jugador jugador = UtilJugador.getJugadores().get(dni);    
                    if (jugador != null) {
                        JOptionPane.showMessageDialog(this, "Ficha de " + dni + " creada.", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
                        UtilJugador.generarFicha(jugador);
                    } else {
                        JOptionPane.showMessageDialog(this, "Error: No existe el jugador.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Error: No hay jugadores.", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al crear la ficha: " + e.toString(), "Mensaje", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButtonAceptarActionPerformed

    /**
     * Método en el botón crear ficha.
     * 
     * @param evt evento en el botón
     */
    private void jButtonCrearFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearFichaActionPerformed
        activarCrearFicha(true);
        jFormattedTextFieldDNI.setText("");
    }//GEN-LAST:event_jButtonCrearFichaActionPerformed

    /**
     * Método para el botón jugar.
     * 
     * @param evt evento en el botón
     */
    private void jButtonJugarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonJugarActionPerformed
        activarJugar(true);
    }//GEN-LAST:event_jButtonJugarActionPerformed

    /**
     * Método para el botón ranking.
     * 
     * @param evt evento en el botón
     */
    private void jButtonRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRankingActionPerformed
        ranking.setVisible(true);        
    }//GEN-LAST:event_jButtonRankingActionPerformed

    /**
     * Obtiene el ranking
     * @return ranking
     */
    public Ranking getRanking() {
        return ranking;
    }

    /**
     * Modifica el ranking 
     * 
     * @param ranking nuevo ranking
     */
    public void setRanking(Ranking ranking) {
        this.ranking = ranking;
    }

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAceptar;
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonCrearFicha;
    private javax.swing.JButton jButtonJugar;
    private javax.swing.JButton jButtonRanking;
    private javax.swing.JButton jButtonRegistrarse;
    private javax.swing.JComboBox<String> jComboBoxDificultad;
    private javax.swing.JFormattedTextField jFormattedTextFieldDNI;
    private javax.swing.JLabel jLabelDNI;
    private javax.swing.JLabel jLabelDificultad;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables
}
